<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>

<head>
  <meta http-equiv="content-type" content="text/html;charset=iso-8859-1"/>
  <title>Nini Manual - .NET Configuration Library</title>

  <style type="text/css">
  <!--
  BODY {
    font-family: tahoma,verdana,arial,helvetica;
    margin: 10;
    background-color: #ffffff;
    color: #000000;
    font-size: 10pt;
  }
  PRE {
    background: #EEEEEE;
    margin-top: 1em; margin-bottom:1em; margin-left:0px;
    padding: 5pt;
    border-style: dotted;
    border-width: 1;
    font-size: 10pt;
  }
  .code-keyword {
    color: #333399;
    font-weight: bold;
  }
  .code-comment {
      color: #339900;
  }
  div.csharp {
      display: block;
  }
  div.vbdotnet {
      display: block;
  }
  .control-panel {
      margin-left: 75%;
      font-size: 10px;
      color: #999;
      border: 1px solid #ccc;
      padding: 3px;
      text-align: center;
  }
  -->
  </style>
  <script type="text/javascript">
  <!--
  // Turns on and off viewable source code
  function showBlock(className, show)
  {
  	var x = document.getElementsByTagName('div');
  	
  	var displayType = (show) ? 'block' : 'none';
  	for (var i = 0; i < x.length; i++)
  	{
  		if (x[i].className == className) {
  			x[i].style.display = displayType
  		}
  	}
  }
  
  // Hides or displays the table of contents
  function showTableOfContents(show)
  {
      showBlock("toc", show);
  }
  
  // Shows only C# code
  function showCSharp()
  {
      showBlock("vbdotnet", false);
      showBlock("csharp", true);
  }
  
  // Shows only VB.NET code
  function showVbDotNet()
  {
      showBlock("vbdotnet", true);
      showBlock("csharp", false);
  }
  
  // Shows all code
  function showAllCode()
  {
      showBlock("vbdotnet", true);
      showBlock("csharp", true);
  }
  -->
  </script>

<h1>Nini Manual</h1>

<p>
  Nini .NET Configuration Library 
  (<a href="http://nini.sourceforge.net/">http://nini.sourceforge.net/</a>) 
  <br/>
  Copyright &copy; 2005 Brent R. Matzelle
</p>

<div class="control-panel">
  Table of contents:
  <a href="javascript:showTableOfContents(true);">Show</a> -
  <a href="javascript:showTableOfContents(false);">Hide</a>
</div>

<div class="toc">
<ul>
  <li>1. <a href="#Introduction">Introduction</a> 
    <ul>
      <li>1.1 <a href="#WhatIsApplicationConfigurationData">What is Application Configuration 
        Data?</a></li>
      <li>1.2 <a href="#TheProblem">The Problem</a></li>
      <li>1.3 <a href="#IntroducingNini">Introducing Nini</a></li>
    </ul>
  </li>
  <li>2. <a href="#GettingStarted">Getting Started </a> 
    <ul>
      <li>2.1 <a href="#ASimpleExample">A Simple Example</a></li>
      <li>2.2 <a href="#DefaultValues">Default Values</a></li>
      <li>2.3 <a href="#SettingSavingRemoving">Setting, Saving, and Removing Keys</a></li>
      <li>2.4 <a href="#AddingRemovingConfigs">Adding and Removing Configs</a></li>
      <li>2.5 <a href="#KeyValueReplacment">Key Value Replacement</a></li>
    </ul>
  </li>
  <li>3. <a href="#AdvancedTopics">Advanced Topics </a> 
    <ul>
      <li>3.1 <a href="#Merging">Merging</a></li>
      <li>3.2 <a href="#ValueAliases">Value Aliases</a></li>
      <li>3.3 <a href="#KeyValueLists">Key Value Lists</a></li>
      <li>3.4 <a href="#Events">Events</a></li>
    </ul>
  </li>
  <li>4. <a href="#OtherConfigurationTypes">Other Configuration Types </a> 
    <ul>
      <li>4.1 <a href="#XMLConfiguration">XML Configuration</a></li>
      <li>4.2 <a href="#WindowsRegistryConfiguration">Windows Registry Configuration</a></li>
      <li>4.3 <a href="#NETCOnfiguration">.NET Configuration Files</a></li>
      <li>4.4 <a href="#ArgvConfiguration">Command Line (Argv) Configuration</a></li>
    </ul>
  </li>
  <li>5. <a href="#UsingNiniEffectively">Using Nini Effectively</a> 
    <ul>
      <li>5.1 <a href="#MultipleUsers">Handling configuration for multiple users</a></li>
      <li>5.2 <a href="#Database">Storing configuration data in a database</a></li>
      <li>5.3 <a href="#AutomatingWithNiniEdit">Automating configuration file creation</a></li>
      <li>5.4 <a href="#Progammatically">Creating configuration files programmatically</a></li>
      <li>5.5 <a href="#Choosing">Choosing the right configuration file type for your application</a></li>
    </ul>
  </li>
</ul>
</div>

<a name="Introduction"></a>
<h2>1. Introduction</h2>
<a name="WhatIsApplicationConfigurationData"></a>
<h3>1.1 What is Application Configuration Data?</h3>

<p>As a developer you deal with application configuration data all of the time.  
  Common examples of this are <a href="http://webopedia.com/TERM/_/_INI_file.html">INI</a> 
  files, <a href="http://webopedia.com/TERM/X/XML.html">XML</a> files, 
  <a href="http://tinyurl.com/38sn4">.NET 
  configuration files</a> (aka “.config”), the <a href="http://www.systweak.com/winreg/winreg.htm">Windows 
  registry</a>, and command line (argv) arguments.  The advantages of configuration 
  files are that they load quickly, do not take up a lot of space, and are easy 
  to edit.  </p>

<a name="TheProblem"></a>
<h3>1.2 The Problem</h3>

<p>
  Attempts to create configuration file access schemes do not satisfy the needs 
  of either programmers or end-users.  To give a real life scenario I worked for 
  an organization that configured their original programs using the Windows registry 
  API (Application Programming Interface).  Later on they developed their own ASP 
  configuration class.  At about the same time another group developed an API that 
  fetched the data from a database.   Then when ASP.NET came along they started 
  to use Web.config.  In a matter of several years the number of configuration data 
  sources grew from one to four!  Needless to say getting configuration data often 
  became a grueling task.  Here are the three major areas where configuration management 
  can be improved: 
</p>

<ul>
<li><p><b>API</b><br/>
    Developers use a configuration file format that gets their application running 
    in the shortest time possible.   However the API for accessing this data is 
    commonly added as an afterthought resulting in an inflexible API.  In very small 
    applications this might not be a problem but as a program’s codebase grows the 
    configuration information will often find itself littered throughout the application 
    code.
  </p>
 </li>
<li><p><b>End Users<br/>
  </b>Configuration files are usually not written with the end user in mind.  
  Often the configuration options are terse programming terms that only the bravest 
  users dare to change them.  This leads to developers having to write complicated 
  configuration file editors or worse, entirely redesigning their original APIs.  
</p>

</li>
<li>
<p>
<b>Multiple Configuration Sources</b>
<br/>
  As your software matures it is not uncommon for more application configuration 
  types to be added (such as the example I gave you earlier).  This often occurs 
  because of merging code from other projects, new improved formats, and moving 
  to different programming platforms.    This forces programmers to learn multiple 
  APIs.  The end result is code that is neither consistent nor friendly to new 
  programmers.  The old configuration files aren't replaced because programmers 
  and their managers are not comfortable with altering mature code. Users that 
  edit the files are resistant to this change because they would prefer not to 
  learn a new file format.</p>

</li>
</ul>

<a name="IntroducingNini"></a>
<h3>1.3 Introducing Nini</h3>
<p>
  Nini is an uncommonly powerful 
  <a href="http://msdn.microsoft.com/netframework/">.NET</a> configuration 
  <a href="http://en.wikipedia.org/wiki/Code_library">library</a> designed 
  to help build highly configurable applications quickly. Nini provides a solution that 
  attempts to eliminate the above problems. It provides a large feature set that 
  gives you functionality that you will use in every phase of your project, from 
  concept to mature product.  This is accomplished through a simple, yet flexible, 
  API that provides an abstraction over the underlying configuration sources.  
  It solves all of the problems that I described above.  We’ll see how this is 
  done in the examples below.
</p>
  
<a name="GettingStarted"></a>
<h2>2. Getting Started</h2>

<a name="ASimpleExample"></a>
<h3>2.1 A Simple Example</h3>
<p>In order to show you how Nini solves these problems let’s go over an example.  
  First, let’s take an example configuration file.  I will choose the <a href="http://webopedia.com/TERM/_/_INI_file.html">INI 
  format</a> for most of the examples in this manual. INI files are a tried and 
  true configuration file type used in well known open source projects such as 
  <a href="http://www.mysql.com/">MySQL</a>, <a href="http://www.php.net/">PHP</a>, 
  and <a href="http://www.samba.org/">Samba</a>. In fact, Nini has support for 
  several INI file types. They are very simple and easy to edit so they remain 
  a very popular choice. Nini contains it's own INI parser class (
  <a href="http://nini.sourceforge.net/Reference/html/Nini.Ini.IniDocument.html">IniDocument</a>) 
  which is written entirely in C# with no 
  <a href="http://tinyurl.com/3ruev">Windows 
  API</a> code so it's cross platform. Here is the text of MyApp.ini for this 
  example:</p>

<pre>
<span class="code-comment">; MyApp.ini</span>
<span class="code-keyword">[Logging]</span>
File Name = MyApp.log
MessageColumns = 5
MaxFileSize = 40000000000000
</pre>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
<p>Below is a C# example piece of code that describes how to access the configuration 
  data from the INI file from the file above: </p>

<pre><span class="code-keyword">using</span> Nini.Config;

IConfigSource source = <span class="code-keyword">new</span> IniConfigSource(&quot;MyApp.ini&quot;);

<span class="code-keyword">string</span> fileName = source.Configs[&quot;Logging&quot;].Get(&quot;File Name&quot;);
<span class="code-keyword">int</span> columns = source.Configs[&quot;Logging&quot;].GetInt(&quot;MessageColumns&quot;);
<span class="code-keyword">long</span> fileSize = source.Configs[&quot;Logging&quot;].GetLong(&quot;MaxFileSize&quot;);
</pre>
</div>

<div class="vbdotnet">
<p>Here is the example in VB: </p>

<pre><span class="code-keyword">Imports</span> Nini.Config

<span class="code-keyword">Dim</span> source <span class="code-keyword">As New</span> IniConfigSource(&quot;MyApp.ini&quot;)

<span class="code-keyword">Dim</span> fileName <span class="code-keyword">As</span> String = source.Configs(&quot;Logging&quot;).Get(&quot;File Name&quot;)
<span class="code-keyword">Dim</span> columns <span class="code-keyword">As</span> Integer = source.Configs(&quot;Logging&quot;).GetInt(&quot;MessageColumns&quot;)
<span class="code-keyword">Dim</span> fileSize <span class="code-keyword">As</span> Long = source.Configs(&quot;Logging&quot;).GetLong(&quot;MaxFileSize&quot;)
</pre>
</div>

<p>Okay, that example threw a few things at you. First, we include Nini's configuration 
  namespace to the imaginary app with <strong>using Nini.Config</strong>. Next 
  we load up the INI file with the <a href="../Reference/html/Nini.Config.IniConfigSource.html">IniConfigSource</a> 
  class. In Nini, each configuration file type has it's own &quot;Source&quot; 
  class. This class knows how to load and save the file. Each of these classes 
  implements the <a href="../Reference/html/Nini.Config.IConfigSource.html">IConfigSource</a> 
  interface so that you abstractly work with multiple configuration types more 
  easily. When a file is loaded all sections (in this case the [Logging] section) 
  are converted to the interface <a href="../Reference/html/Nini.Config.IConfig.html">IConfig</a> 
  and added to a collection on the Source class. The IConfig class provides very 
  fast access to retrieve, add, or remove configuration keys (like &quot;File 
  Name&quot; in the above INI file). The methods of the IConfig class include 
  <a href="../Reference/html/Nini.Config.IConfig.Get_overloads.html">Get</a>, 
  <a href="../Reference/html/Nini.Config.IConfig.GetString_overloads.html"> GetString</a>, 
  <a href="../Reference/html/Nini.Config.IConfig.GetInt_overloads.html">GetInt</a>, 
  <a href="../Reference/html/Nini.Config.IConfig.GetFloat_overloads.html">GetFloat</a>, 
  <a href="../Reference/html/Nini.Config.IConfig.GetDouble_overloads.html">GetDouble</a>, 
  and <a href="../Reference/html/Nini.Config.IConfig.GetLong_overloads.html">GetLong</a> 
  methods. All of the methods prefixed with &quot;Get&quot; are overloaded to 
  provide more data. The next couple sections describe how to use these overloads. 
</p>
  
<a name="DefaultValues"></a>
<h3>2.2 Default Values</h3>
<p>Sometimes an option will not be present in a configuration file.  This might 
  be because it hasn’t been added to the project’s main build or because it should 
  remain secret to users.  For these cases Nini provides provides overloaded methods 
  that allow a programmer to define default values.  </p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here’s an example in C#:
  
<pre><span class="code-comment">// Sets missing to the default value, &quot;Default result&quot;.</span>
<span class="code-keyword">string</span> missing = config.Get(&quot;Missing Config&quot;, &quot;Default result&quot;);

<span class="code-comment">// Sets smallNumber to the default value, 50.</span>
<span class="code-keyword">int</span> smallNumber = config.GetInt(&quot;Not Present&quot;, 50);
</pre>
</div>

<div class="vbdotnet">
Here is the same example in VB:

<pre><span class="code-comment">' Sets missing to the default value, &quot;Default result&quot;.</span>
<span class="code-keyword">Dim</span> missing <span class="code-keyword">As String</span> = config.Get(&quot;Missing Config&quot;, &quot;Default result&quot;)

<span class="code-comment">' Sets smallNumber to the default value, 50.</span>
<span class="code-keyword">Dim</span> smallNumber <span class="code-keyword">As Integer</span> = config.GetInt(&quot;Not Present&quot;, 50)
</pre>
</div>

<a name="SettingSavingRemoving"></a>
<h3>2.3 Setting, Saving, and Removing Keys</h3>
<p>It is also possible to set and save new values into the configuration file. 
  Calling the Set method will change an existing value or if it does not exist 
  add it. Here is an example:</p>
<pre>
config.Set(&quot;File Name&quot;, &quot;MyNewFile.log&quot;);
config.Set(&quot;MessageColumns&quot;, 45);
config.Remove(&quot;File Name&quot;);

source.Save();</pre>

<p>It is necessary to call the Save method to save a file, h0wever, you can also 
  set the AutoSave property on an IConfigSource and that will automatically save 
  the file each time the Set method is called. If you want to save a document 
  to a different path or a different object then the <a href="../Reference/html/Nini.Config.IniConfigSource.html">IniConfigSource</a>, 
  <a href="../Reference/html/Nini.Config.XmlConfigSource.html">XmlConfigSource</a>, 
  and <a href="../Reference/html/Nini.Config.DotNetConfigSource.html">DotNetConfigSource</a> 
  classes all save overloaded <strong>Save</strong> methods that allow you to 
  save to either a new path or a <a href="http://tinyurl.com/dnaew">TextWriter</a>:</p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here is an example in C#:

<pre><span class="code-keyword">using</span> System.IO;

IniConfigSource source = <span class="code-keyword">new</span> IniConfigSource(&quot;Test.ini&quot;);
StringWriter writer = <span class="code-keyword">new</span> StringWriter();
source.Save(writer); <span class="code-comment">// Save to StringWriter(TextWriter)</span>

source.Save("some/new/path.ini"); <span class="code-comment">// Save to new path</span>
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre><span class="code-keyword">Imports</span> System.IO

<span class="code-keyword">Dim</span> source <span class="code-keyword">As</span> IniConfigSource = <span class="code-keyword">new</span> IniConfigSource(&quot;Test.ini&quot;)
<span class="code-keyword">Dim</span> writer <span class="code-keyword">As New</span> StringWriter()
source.Save(writer) <span class="code-comment">' Save to StringWriter(TextWriter)</span>

source.Save("some/new/path.ini") <span class="code-comment">' Save to new path</span>
</pre>
</div>

<a name="AddingRemovingConfigs"></a>

<h3>2.4 Adding and Removing Configs</h3>

<p>On occassion you will want to add and remove IConfigs yourself. Nini has a 
  simple means to accomplish both of these actions. Here is an example where I 
  create a new config and then immediately remove it.</p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here is an example in C#:

<pre>
IConfig newConfig = source.AddConfig("NewConfig");

source.Configs.Remove(newConfig);
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-keyword">Dim</span> newConfig <span class="code-keyword">As</span> IConfig = source.AddConfig("NewConfig")

source.Configs.Remove(newConfig)
</pre>
</div>

<a name="KeyValueReplacment"></a>
<h3>2.5 Key Value Replacement</h3>
<p>In many cases you will find that your key values are dependent on the values 
  of other keys. For instance you have a root path configuration value and several 
  values for files that use this path like in this example:</p>
  
<pre>
<span class="code-keyword">[File Path]</span>
RootPath = C:\Program Files\My Program
Logging = MyApp.log
WebPage = index.html
</pre>

<p>Without Nini if you wanted to combine the value of &quot;RootPath&quot; with 
  &quot;Logging&quot; and &quot;WebPage&quot; then you would have to perform ugly 
  string concatenations to get &quot;C:\Program Files\My Program\index.html&quot;. 
  In Nini you do not need to do this:</p>

<pre>
<span class="code-keyword">[File Path]</span>
RootPath = C:\Program Files\My Program
Logging = <strong>${RootPath}</strong>\MyApp.log
WebPage = <strong>${RootPath}</strong>\index.html
</pre>

<p>This can save you a lot of trouble concatenating them yourself and make your 
  code a lot cleaner. If you want to grab a value from a different section you 
  can do the same above but add the section name followed by a bar (&quot;|&quot;) 
  like so: <strong>${section|key}</strong>.  When you are ready to perform 
  the replacement call ReplaceKeyValues</p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here is an example in C#:

<pre>
IConfigSource source = <span class="code-keyword">new</span> IniConfigSource(&quot;MyApp.ini&quot;);
source.ReplaceKeyValues();
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-keyword">Dim</span> source <span class="code-keyword">As New</span> IConfigSource(&quot;MyApp.ini&quot;)
source.ReplaceKeyValues()
</pre>
</div>

<p>That’s how easy it is to create your first Nini configured application.  The 
  following sections will explain some more advanced features of Nini. </p>
  
<a name="AdvancedTopics"></a>
<h2>3. Advanced Topics</h2>

<a name="Merging"></a>
<h3>3.1 Merging</h3>

<p>Merging is a very powerful functionality that allows developers to combine 
  together the configuration data from multiple sources into a single object. 
  You can potentially combine together an infinite number of different configuration 
  types into a single IConfigSource! You could add multiple INI, XML, and Registry 
  files into the same object. Pretty cool don't you think? Here is an example 
  of how to combine an INI file with an XML file.</p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here is an example in C#:

<pre>
IConfigSource mainSource = <span class="code-keyword">new</span> IniConfigSource("MyApp.ini");
IConfigSource xmlSource = <span class="code-keyword">new</span> XmlConfigSource("MyApp.xml");
mainSource.Merge(xmlSource);

<span class="code-comment">// Now you can access any IConfig from mainSource and xmlSource</span>
<span class="code-keyword">string</span> xmlValue = mainSource.Configs["SomeXmlSection"].Get("AnOption");
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-keyword">Dim</span> mainSource <span class="code-keyword">As New</span> IniConfigSource("MyApp.ini")
<span class="code-keyword">Dim</span> xmlSource <span class="code-keyword">As New</span> XmlConfigSource("MyApp.xml")
mainSource.Merge(xmlSource)

<span class="code-comment">' Now you can access any IConfig from mainSource and xmlSource</span>
<span class="code-keyword">Dim</span> xmlValue <span class="code-keyword">As</span> String = mainSource.Configs("SomeXmlSection").Get("AnOption")
</pre>
</div>

<p>When the data is merged between files any IConfigs of the same name or containing 
  the same keys the file being merged in will overwrite the previous ones. This 
  is very important for those of you with clients that have different configuration 
  needs. You can create your default configuration settings in one file and have 
  a client specific file that will override the settings of the main file if needed. 
  This will save you tons of work. It did for me. </p>

<a name="ValueAliases"></a>
<h3>3.2 Value Aliases</h3>
<p>Many configuration files have options that are clear to programmers but very 
  confusing to non-programmers. In order to help make a configuration file easier 
  for non-programmers to understand a common practice is to make the keys and 
  values read more like common human dialog.  Lets see an example of how you might 
  return a Boolean value by using a string value that’s easier for humans to understand.  
  First, let’s start with the AliasExample INI file:</p>

<pre><span class="code-comment">; AliasExample.ini</span>
<span class="code-keyword">[Web Browser]</span>
Block Popups = ON
Check For Default Browser = Off
Error Level = warn</pre>

<p>As you can see rather than using a value like &quot;1&quot; or &quot;true&quot; 
  for the value of each key I have used &quot;On&quot; and &quot;Off&quot;, which 
  hopefully are easier for users to understand. You will also notice that the 
  case between each value is not entirely uppercase or lowercase. I did this on 
  purpose to make a point. It is difficult enough to users to remember what value 
  to place in a particular key value so to make it a bit easier on them do <strong>not</strong> 
  make them remember what case to use as well! The problem with ignoring case 
  is that your code would look pretty ugly as in the following example: </p>

<pre><span class="code-keyword">bool</span> blockPopUps = (config.Get(&quot;Block Popups&quot;).ToLower() == &quot;on&quot;);
</pre>

<p>Let's define some rules to this file to make them We want the values of the 
  <strong>BlockPopUps</strong> section to return a <a href="http://tinyurl.com/cg6ga">Boolean</a> 
  value of <strong>true</strong> when the value is set to &quot;On&quot; and a 
  value of <strong>false</strong> when the value is set to &quot;Off&quot;. Furthermore, 
  I'd like the <strong>Error Level</strong> to return the integer value of 100 
  when it is set to &quot;Warn&quot; and a value of 200 when the value is set 
  to &quot;Error&quot;. The following code shows how to add rules to the Alias 
  property of the IConfigSource that defines the rules that I just defined in 
  the previous paragraph.</p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here is an example in C#:

<pre>IConfigSource source = <span class="code-keyword">new</span> IniConfigSource(&quot;AliasExample.ini&quot;);

<span class="code-comment">// Creates two Boolean aliases.</span>
source.Alias.AddAlias(&quot;On&quot;, <span class="code-keyword">true</span>);
source.Alias.AddAlias(&quot;Off&quot;, <span class="code-keyword">false</span>);

<span class="code-comment">// Sets two integer aliases.</span>
source.Alias.AddAlias(&quot;Error Level&quot;, &quot;Warn&quot;,  100);
source.Alias.AddAlias(&quot;Error Level&quot;, &quot;Error&quot;, 200);

IConfig config = source.Configs[&quot;Web Browser&quot;];
<span class="code-keyword">bool</span> blockPopUps = config.GetBoolean(&quot;BlockPopUps&quot;);
<span class="code-keyword">int</span> errorCode = config.GetInt(&quot;Error Code&quot;, <span class="code-keyword">true</span>);
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre><span class="code-keyword">Dim</span> source <span class="code-keyword">As New</span> IniConfigSource(&quot;AliasExample.ini&quot;)

<span class="code-comment">' Creates two Boolean aliases.</span>
source.Alias.AddAlias(&quot;On&quot;, <span class="code-keyword">True</span>)
source.Alias.AddAlias(&quot;Off&quot;, <span class="code-keyword">False</span>)

<span class="code-comment">' Sets two integer aliases.</span>
source.Alias.AddAlias(&quot;Error Level&quot;, &quot;Warn&quot;,  100)
source.Alias.AddAlias(&quot;Error Level&quot;, &quot;Error&quot;, 200)

<span class="code-keyword">Dim</span> config <span class="code-keyword">As</span> IConfig = source.Configs(&quot;Web Browser&quot;)
<span class="code-keyword">Dim</span> blockPopUps = config.GetBoolean(&quot;BlockPopUps&quot;)
<span class="code-keyword">int</span> errorCode = config.GetInt(&quot;Error Code&quot;, <span class="code-keyword">True</span>)
</pre>
</div>

<p>The first two calls to <a href="../Reference/html/Nini.Config.IConfig.AddAlias_overloads.html">AddAlias</a> 
  add Boolean values to the text “On” and “Off”.  The next two calls to this method 
  add alias text to the “Error Level” configuration with the text of “Warn” and 
  “Error” along with the numeric values of 100 and 200, respectively.  Next I 
  fetched the key data.  The GetInt method is overloaded so that if the parameter 
  is set to <strong>true</strong> then it loads the data as an alias rather than 
  as a literal integer value.</p>

<a name="KeyValueLists"></a>
<h3>3.3 Key Value Lists</h3>

<p>Nini does not have a specialized method for returning lists of information. 
  This is because there already is way to do this using a little trick with the 
  <a href="http://tinyurl.com/4uz5z">String.Split</a> 
  method of the .NET Framework. Here is an INI file with a list of servers separated 
  by the vertical line ("|") delimeter: </p>
<pre>
<span class="code-keyword">[MailServers]</span>
ServerList = "http://mail.yahoo.com/|http://www.hotmail.com/|http://www.mail.com/"
</pre>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

Now using the Split method we will return the list of servers as an array of strings:

<div class="csharp">
<pre>
<span class="code-keyword">string</span>[] serverList = source.Configs["MailServers"].Get("ServerList").Split('|');
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-keyword">Dim serverList() As String</span> = source.Configs("MailServers").Get("ServerList").Split('|')
</pre>
</div>

You can use any number of delimeters with the Split method. Be creative.  Just pick a 
delimeter that you will not be using as a key value.

<a name="Events"></a>
<h3>3.4 Events</h3>

<p>Nini makes things easy by allowing developers to perform operations in a
disconnected fashion.  A first object can usually just use an IConfig without
having to worry about how other objects are using it.  However, there are times
when it is useful to know when the configuration data has been changed.  Nini
has added many events to help deal with these situations. </p>

<p>
In the following scenario a class wants notification when an IConfigSource 
has been saved.  
</p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here is a C# example:

<pre>
<span class="code-keyword">void</span> SourceLoad()
{
  source = <span class="code-keyword">new</span> IniConfigSource();
  source.Saved += <span class="code-keyword">new</span> EventHandler(this.source_Saved);
}

<span class="code-keyword">void</span> source_Saved(<span class="code-keyword">object</span> sender, EventArgs e)
{
  <span class="code-comment">// perform save actions here</span>
}
</pre>
</div>

<div class="vbdotnet">
Here is a VB example:

<pre>
<span class="code-keyword">Sub</span> SourceLoad()
{
  source = New IniConfigSource()
  source.Saved += New EventHandler(Me.source_Saved)
}

<span class="code-keyword">Sub</span> source_Saved(sender <span class="code-keyword">As</span> object, e <span class="code-keyword">As</span> EventArgs) Handles source.Saved
{
  <span class="code-comment">' perform save actions here</span>
}
</pre>
</div>

There are more events such as Load, KeySet, KeyRemoved, ConfigAdded, and ConfigRemoved.  

<a name="OtherConfigurationTypes"></a>
<h2>4. Other Configuration Types</h2>

<a name="XMLConfiguration" id="XMLConfiguration"></a>
<h3>4.1 XML Configuration</h3>
<p>Nini has it's own XML configuration file structure. It provides more flexibility 
  than does the .NET configuration file format. It's main advantages are that 
  you can have more than one XML configuration file and that the format is much 
  more concise. Here is an example of the format. You will notice that it resembles 
  an INI file quite closely. The configuration values are the same as the INI 
  in the previous examples:</p>
<pre><span class="code-comment">&lt;!-- MyApp.xml --&gt;</span>
&lt;Nini&gt;
    &lt;Section Name=&quot;Logging&quot;&gt;
        &lt;Key Name=&quot;File Name&quot; Value=&quot;MyApp.log&quot; /&gt;
        &lt;Key Name=&quot;MessageColumns&quot; Value=&quot;5&quot; /&gt;
        &lt;Key Name=&quot;MaxFileSize&quot; Value=&quot;40000000000000&quot; /&gt;
    &lt;/Section&gt;
&lt;/Nini&gt;</pre>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<p>To load the file is very simple:</p>

<div class="csharp">
<pre>
<span class="code-comment">// Loads the XML file</span>
XmlConfigSource source = <span class="code-keyword">new</span> XmlConfigSource("MyApp.xml");
<span class="code-comment">// Retrieves a value</span>
<span class="code-keyword">long</span> maxFileSize = source.Configs["Logging"].GetLong("MaxFileSize");
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-comment">' Loads the XML file</span>
<span class="code-keyword">Dim</span> source <span class="code-keyword">As New</span> XmlConfigSource("MyApp.xml")
<span class="code-comment">' Retrieves a value</span>
<span class="code-keyword">Dim</span> maxFileSize <span class="code-keyword">As</span> Long = source.Configs("Logging").GetLong("MaxFileSize")
</pre>
</div>

<a name="WindowsRegistryConfiguration"></a>
<h3>4.2 Windows Registry Configuration</h3>

If you are using one of the many Microsoft Windows operating systems then you 
can access data from the <a href="http://tinyurl.com/c8tpz">Windows 
Registry</a>. Here is an example key path for a registry item: 
<pre>HKEY_LOCAL_MACHINE\Sofware\MyApp\Logging
    &quot;File Name&quot;       "MyApp.log"  REG_SZ
    &quot;MessageColumns&quot;  "5"          REG_DWORD
    &quot;MaxFileSize&quot;     "40000000"   REG_DWORD</pre>
<p>To access this code the method is a bit more complex than others. You must 
  create a mapping to a registry entry. This functionality will also give you 
  the ability to merge many registry keys into a single IConfigSource. Here is 
  some example code to access it.</p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here is an example in C#:

<pre>
<span class="code-keyword">using</span> Microsoft.Win32;
RegistryConfigSource source = <span class="code-keyword">new</span> RegistryConfigSource();
<span class="code-comment">// Loads the registry tree</span>
source.AddMapping(Registry.LocalMachine, "Software\\MyApp\\Logging");
<span class="code-comment">// Retrieves a value</span>
<span class="code-keyword">long</span> maxFileSize = source.Configs["Logging"].GetLong("MaxFileSize");
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-keyword">Imports</span> Microsoft.Win32
<span class="code-keyword">Dim</span> source <span class="code-keyword">As New</span> RegistryConfigSource()
<span class="code-comment">' Loads the registry tree</span>
source.AddMapping(Registry.LocalMachine, "Software\\MyApp\\Logging")
<span class="code-comment">' Retrieves a value</span>
<span class="code-keyword">Dim</span> maxFileSize <span class="code-keyword">As</span> Long = source.Configs("Logging").GetLong("MaxFileSize")
</pre>
</div>

<p>If you'd like to recursively retrieve all data under a specified registry key 
  there is a method to accomplish this as well. </p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

If you want to get all subkeys underneath a key with a flat name you can do this:

<div class="csharp">
<pre>
<span class="code-keyword">using</span> Microsoft.Win32;
<span class="code-comment">// Loads the registry tree and all nodes beneath it without </span>
RegistryConfigSource source = <span class="code-keyword">new</span> RegistryConfigSource();
source.AddMapping(Registry.LocalMachine, "Software\\MyApp", RegistryRecurse.Flattened);

<span class="code-keyword">string</span> maxFileSize = source.Configs["MyApp"].GetString("SomeConfig");
<span class="code-keyword">long</span> maxFileSize = source.Configs["Logging"].GetLong("MaxFileSize");
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-keyword">Imports</span> Microsoft.Win32
<span class="code-comment">' Loads the registry tree and all nodes beneath it without </span>
<span class="code-keyword">Dim</span> source <span class="code-keyword">As New</span> RegistryConfigSource()
source.AddMapping(Registry.LocalMachine, "Software\\MyApp", RegistryRecurse.Flattened)

<span class="code-keyword">Dim</span> maxFileSize <span class="code-keyword">As</span> String = source.Configs("MyApp").GetString("SomeConfig");
<span class="code-keyword">Dim</span> maxFileSize <span class="code-keyword">As</span> Long = source.Configs("Logging").GetLong("MaxFileSize")
</pre>
</div>

<a name="NETCOnfiguration"></a>

<h3>4.3 .NET Configuration Files</h3>
<p>The .NET Framework has it's own configuration file mechanism that uses a specific 
  <a href="http://tinyurl.com/38sn4">XML 
  format</a>. You may be familiar with them in ASP.NET as <strong>web.config</strong> 
  files. If you are using them with Windows Forms, console applications, or services 
  you will know them as <strong>[APP NAME].exe.config</strong> files. To support 
  users that still use this configuration file format in their applications Nini 
  has support for these files as well. </p>
  
  
<pre><span class="code-comment">&lt;!-- ExampleApp.exe.config --&gt;</span>
&lt;configuration&gt;
    &lt;configSections&gt;
        &lt;section name=&quot;Logging&quot; type=&quot;System.Configuration.NameValueSectionHandler&quot; /&gt;
    &lt;/configSections&gt;
    &lt;Logging&gt;
        &lt;add key=&quot;File Name&quot; value=&quot;MyApp.log&quot; /&gt;
        &lt;add key=&quot;MessageColumns&quot; value=&quot;5&quot; /&gt;
        &lt;add key=&quot;MaxFileSize&quot; value=&quot;40000000000000&quot; /&gt;
    &lt;/Logging&gt;
&lt;/configuration&gt;</pre>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

Accessing the data is very similar to loading an INI or XML file:

<div class="csharp">
<pre>
IConfigSource source = <span class="code-keyword">new</span> DotNetConfigSource(DotNetConfigSource.GetFullConfigPath());

<span class="code-keyword">string</span> fileName = source.Configs[&quot;Logging&quot;].Get(&quot;File Name&quot;);
<span class="code-keyword">int</span> columns = source.Configs[&quot;Logging&quot;].GetInt(&quot;MessageColumns&quot;);
<span class="code-keyword">long</span> fileSize = source.Configs[&quot;Logging&quot;].GetLong(&quot;MaxFileSize&quot;);
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-keyword">Dim</span> source <span class="code-keyword">As New</span> DotNetConfigSource(DotNetConfigSource.GetFullConfigPath())

<span class="code-keyword">Dim</span> fileName <span class="code-keyword">As</span> String = source.Configs(&quot;Logging&quot;).Get(&quot;File Name&quot;)
<span class="code-keyword">Dim</span> columns <span class="code-keyword">As</span> Integer = source.Configs(&quot;Logging&quot;).GetInt(&quot;MessageColumns&quot;)
<span class="code-keyword">Dim</span> fileSize <span class="code-keyword">As</span> Long = source.Configs(&quot;Logging&quot;).GetLong(&quot;MaxFileSize&quot;)
</pre>
</div>

<a name="ArgvConfiguration"></a>

<h3>4.4 Command Line (Argv) Configuration</h3>
<p>Since the beginning of programming applications have had the capability to 
  accept command line switches. These switches are simply strings passed into 
  the application when it is first started. The Windows program Xcopy has many 
  command line 
  <a href="http://tinyurl.com/a7e3q">switches</a> 
  and the excellent downloading application wget has it's own 
  <a href="http://linux.about.com/library/cmd/blcmdl1_wget.htm">switches</a> 
  as well. If you want to read a little more about how command line parameters 
  work in .NET 
  <a href="http://tinyurl.com/clmy4">click 
  here</a>. Our first example is very similar to the others you have seen so far. 
  The difference is that the 
  <a href="../Reference/html/Nini.Config.IConfig.AddSwitch_overloads.html">AddSwitch</a> 
  method needs to be called for each configuration key. There is a short key and 
  a long key that both can be used to fetch configuration data. </p>

<div class="control-panel">
Language: 
<a href="javascript:showCSharp();">C# only</a> -
<a href="javascript:showVbDotNet();"> VB only</a> - 
<a href="javascript:showAllCode();">All</a>
</div>

<div class="csharp">
Here is an example in C#:

<pre>
<span class="code-keyword">public static int</span> Main(<span class="code-keyword">string</span>[] args)
{
   ArgvConfigSource source = <span class="code-keyword">new</span> ArgvConfigSource(args);

   source.AddSwitch("Logging", "file-name", "f");
   source.AddSwitch("Logging", "columns", "c");
   source.AddSwitch("Logging", "max-file-size", "m");

   <span class="code-keyword">if</span>(args.Length > 0)
   {
      <span class="code-keyword">string</span> fileName = source.Configs[&quot;Logging&quot;].Get(&quot;file-name&quot;);
      <span class="code-keyword">int</span> columns = source.Configs[&quot;Logging&quot;].GetInt(&quot;columns&quot;);
      <span class="code-keyword">long</span> fileSize = source.Configs[&quot;Logging&quot;].GetLong(&quot;max-file-size&quot;);
   }
}
</pre>
</div>

<div class="vbdotnet">
Here is the example in VB:

<pre>
<span class="code-keyword">Public Static Function</span> Main(args() <span class="code-keyword">As</span> String) <span class="code-keyword">As</span> Integer
   <span class="code-keyword">Dim</span> source <span class="code-keyword">As New</span> ArgvConfigSource(args)

   source.AddSwitch("Logging", "file-name", "f")
   source.AddSwitch("Logging", "columns", "c")
   source.AddSwitch("Logging", "max-file-size", "m")

   <span class="code-keyword">If</span> (args.Length > 0) <span class="code-keyword">Then</span>
      <span class="code-keyword">Dim</span> fileName <span class="code-keyword">As</span> String = source.Configs(&quot;Logging&quot;).Get(&quot;file-name&quot;)
      <span class="code-keyword">Dim</span> columns <span class="code-keyword">As</span> Integer = source.Configs(&quot;Logging&quot;).GetInt(&quot;columns&quot;)
      <span class="code-keyword">Dim</span> fileSize <span class="code-keyword">As</span> Long = source.Configs(&quot;Logging&quot;).GetLong(&quot;max-file-size&quot;)
   <span class="code-keyword">End If</span>
<span class="code-keyword">End Function</span>
</pre>
</div>

<a name="UsingNiniEffectively"></a>
<h2>5. Using Nini Effictively</h2>

<a name="MultipleUsers"></a>
<h3>5.1 Handling configuration for multiple users</h3>

<p>
You might notice that the ConfigurationSettings class for .NET 1.0 and 1.1 
only provides means of retrieving configuration values.  This is because it 
is normally a bad idea for programmers to change configuration values for an 
entire application programmatically.  The way the application should be 
globally configured is by an administrator.  For this reason, I recommend 
that you do not change application level settings.  
</p>

<p>
However, it is essential that you allow users to configure the application 
according to their own personal preferences.  Nini allows you to create 
many different configuration file sources so all that you need to do is 
place a configuration file in the right directory.  The standard for 
Windows programs is the application data directory:
</p>

<pre>
C:\Documents and Settings\[username]\Local Settings\Application Data\[Application Name]\Settings.ini
</pre>

<p>
You can get this path programatically with the following path:
</p>

<pre>
<span class="code-keyword">string</span> folder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
</pre>

<a name="Database"></a>
<h3>5.2 Storing configuration data in a database</h3>

<p>
If you are running an ASP.NET application then you probably have multiple 
users in each system.  You will probably also have a bunch of user 
settings to edit.  Most web applications are entirely configured with a 
database so the following is an example of using Nini along with your database.
</p>

<p>
Here's a very simple example with a SQL Server table.  This can easily 
be adapted to any other database.  Here is the structure of the database table:
</p>

<pre>
<span class="code-keyword">CREATE TABLE</span> UserSettings
(
   UserId ID,
   Settings TEXT
);
</pre>

<p>
The ConfigSettings field stores a Nini configuration value.  Now you can 
load a Nini configuration values like this:
</p>

<pre>
<span class="code-keyword">string</span> userId = GetUserId(); <span class="code-comment">// retrieve the user id somehow</span>

SqlCommand command = <span class="code-keyword">new</span> SqlCommand("SELECT Settings FROM UserSettings WHERE ID = "
                                     + userId, connection);

connection.Open();

SqlDataReader reader = command.ExecuteReader();

<span class="code-keyword">if</span>(reader.HasRows) {
    reader.Read();
    IConfigSource source = <span class="code-keyword">new</span> XmlConfigSource(<span class="code-keyword">new</span> StringReader(reader.GetString(0)));
}

reader.Close();
connection.Close();
</pre>

<a name="AutomatingWithNiniEdit"></a>
<h3>5.3 Automating configuration file creation</h3>

<p>
Being able to create builds automatically is essential for any development 
project.  There are several tools to accomplish this such as batch (.bat) 
scripts, but the most popular choice for the .NET Framework is probably 
<a href="http://nant.sourceforge.net/">NAnt</a>.  You may find yourself needing to 
create a configuration file with your build managment system.  To make 
these duties easier the Nini project has NiniEdit, the Nini command-line 
configuration editor.  With this application you can create and edit any 
file-based configuration data.  The NiniEditor is included with each Nini 
release in the Examples directory.    
</p>

<p>
Let's add an example of how to use NiniEdit in your build.  Let's assume 
that your build is a batch file in the first example and you need to create 
the following INI file programmatically:
</p>

<pre>
<span class="code-keyword">[General]</span>
Debug = false
Logging = On
<span class="code-keyword">[Logging]</span>
FilePath = C:\temp\MyApp.log
</pre>

<p>
The following calls will create the configuration file automatically:
</p>

<pre>
<span class="code-comment">REM Create the new configuration file</span>
niniedit --new --set-type=ini MyApp.ini
niniedit --add=General MyApp.ini
niniedit --add=Logging MyApp.ini
niniedit --config=General --set-key=Debug,false MyApp.ini
niniedit --config=General --set-key=Logging,On MyApp.ini
niniedit --config=Logging --set-key=FilePath,C:\temp\MyApp.log MyApp.ini
</pre>

<p>
If you were performing the same thing in NAnt you would do this:
</p>

<pre>
&lt;exec program="niniedit" commandline="-n -s INI MyApp.ini" /&gt;
&lt;exec program="niniedit" commandline="-a General MyApp.ini" /&gt;
&lt;exec program="niniedit" commandline="-a Logging MyApp.ini" /&gt;
&lt;exec program="niniedit" commandline="-c General -k Debug,false MyApp.ini" /&gt;
&lt;exec program="niniedit" commandline="-c General -k Logging,On MyApp.ini" /&gt;
&lt;exec program="niniedit" commandline="-c Logging -k FilePath,C:\temp\MyApp.log MyApp.ini" /&gt;
</pre>

<p>
That's all there is to it.  NiniEdit has other functions such as the 
ability to list configs, keys, key values, and remove keys.  If nothing 
else then use NiniEdit as an example of how to write your own 
command-line applications with Nini.
</p>

<a name="Progammatically"></a>
<h3>5.4 Creating configuration files programmatically</h3>

<p>
On occassion it might be useful to create your configuration files 
programmatically with your application.  Doing this with Nini is very easy.  
</p>

<p>
Let's say that you want to create the same INI file that you created 
in the either example:
</p>

<pre>
<span class="code-keyword">[General]</span>
Debug = false
Logging = On
<span class="code-keyword">[Logging]</span>
FilePath = C:\temp\MyApp.log
</pre>

<p>
Here's how you would create it in code:
</p>

<pre>
IniConfigSource source = <span class="code-keyword">new</span> IniConfigSource();

IConfig config = source.AddConfig("General");
config.Set("Debug", "false");
config.Set("Logging", "On");

config = source.AddConfig("Logging");
config.Set("FilePath", "C:\\temp\\MyApp.log");

source.Save("MyApp.ini");
</pre>

<a name="Choosing"></a>
<h3>5.5 Choosing the right configuration file type for your application</h3>

<p>
Nini was written to make all configuration file types first-class 
citizens.  This is because each configuration file type has it's own 
strengths and weaknesses.  The list below contains some basic guidelines:
</p>

INI
<ul>
<li>Speed - The file type is parsed very quickly so it is likely to load 
and save faster than other types.
<li>Readibility - Of the configuration types this is probably the least 
scary to users.  If you are going to have users alter this configuration 
file manually then I greatly recommend this format.  
<li>Installers - INI files are supported by many types of installers 
(Wise, NSIS, to name a couple).  If you need your build to edit these 
files than this is definitely the way to go.
</ul>

XML
<ul>
<li>Speed - The XML parser has a lot of information to load so this is 
probably the slowest.
<li>Readibility - This format is a bit scary for beginning users to understand.
<li>Support - This is supported by all programming languages so if other 
applications are accessing data then this is a good type.
<li>Installers - Since there is no standard XML format for configuration 
files this is not often supported by installers.  
</ul>

.NET Configuration File
<ul>
<li>Speed - The XML parser has a lot of information to load so this is 
probably the slowest.
<li>Readibility - This format is a bit scary for beginning users to understand.
<li>Installers - The .NET Framework uses these configuration files for 
other configurations.  I would recommend not using it if it mixes up .NET 
configurations and your own application configuration options. 
</ul>

Windows Registry
<ul>
<li>Speed - Retrieves configuration data quickly.  The retrieval speed 
does become slower as the registry becomes increasingly filled with data.  
This is cited as one of the reasons why periodically re-installing Windows 
can make a computer run faster.
<li>Readibility - You should use this type if you really do not want users 
to be able to configure the application.  Touching the Registry can cause 
serious problems so it is recommended that you do not use it unless necessary.  
However, know that your support staff will have the same problems as users 
if they need users to tweak configuration settings.  Other than that, the 
configuration file editor is pretty well known and mature.  
<li>Installers - Most installers support reading and editing registry keys 
so this is a good choice.  
</ul>

<p>
There is no perfect configuration type because each one has it's own benefits.  
If you end up choosing a configuration file type that turns out to not right 
for your situation then do not be alarmed.  Nini abstracts what type of file 
you are accessing so the amount of code that you will have to change should 
be minimal.
</p>

<p>
That's it for this tutorial. I hope that you found it helpful! If you have any 
questions or suggestions for improving this manual then go to the Nini home 
page and use the forums, bug tracker, or feature request tools to make 
yourself heard.
</p>

<hr noshade>
Copyright &copy; 2005 Brent R. Matzelle. All rights reserved. 
</body>
</html>
